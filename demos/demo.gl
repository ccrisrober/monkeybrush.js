precision mediump float;
#define GLSLIFY 1
struct Material {
	vec3 color;
	float kAmbient, kDiffuse, kSpecular;
	float phongExponent;
};

struct PointLight {
	vec3 position;
	vec3 diffuse;
	vec3 ambient;
};

vec3 blinnPhong (
	Material material_0,
	PointLight light,
	vec3 surfaceNormal,
	vec3 surfacePosition,
	vec3 viewDirection_0) {

	vec3 L = normalize(light.position - surfacePosition);
	vec3 H = normalize(viewDirection_0 + surfaceNormal);
	vec3 ambient = light.ambient * material_0.color;
	vec3 diffuse = max(0.0, dot(L, surfaceNormal)) * light.diffuse *
	material_0.color;
	float specular = pow(max(0.0, dot(L, H)), material_0.phongExponent);
	return material_0.kAmbient * ambient +
		material_0.kDiffuse * diffuse +
		material_0.kSpecular * specular;
}

#define NUM_LIGHTS 16
varying vec3 normal, position, viewDirection;
uniform Material material;
uniform PointLight lights[NUM_LIGHTS];
void main() {
	vec3 color = vec3(0,0,0);
	for(int i = 0; i<NUM_LIGHTS; ++i) {
		color += blinnPhong(
		material,
		lights[i],
		normal,
		position,
		viewDirection);
	}
	gl_FragColor = vec4(color, 1.0);
}