interface WebGLQuery extends WebGLObject {
}

interface WebGLSampler extends WebGLObject {
}

interface WebGLSync extends WebGLObject {
}

interface WebGLTransformFeedback extends WebGLObject {
}

interface WebGLVertexArrayObject extends WebGLObject {
}

interface WebGL2RenderingContext extends WebGLRenderingContext {
  READ_BUFFER: number;
  UNPACK_ROW_LENGTH: number;
  UNPACK_SKIP_ROWS: number;
  UNPACK_SKIP_PIXELS: number;
  PACK_ROW_LENGTH: number;
  PACK_SKIP_ROWS: number;
  PACK_SKIP_PIXELS: number;
  COLOR: number;
  DEPTH: number;
  STENCIL: number;
  RED: number;
  RGB8: number;
  RGBA8: number;
  RGB10_A2: number;
  TEXTURE_BINDING_3D: number;
  UNPACK_SKIP_IMAGES: number;
  UNPACK_IMAGE_HEIGHT: number;
  TEXTURE_3D: number;
  TEXTURE_WRAP_R: number;
  MAX_3D_TEXTURE_SIZE: number;
  UNSIGNED_INT_2_10_10_10_REV: number;
  MAX_ELEMENTS_VERTICES: number;
  MAX_ELEMENTS_INDICES: number;
  TEXTURE_MIN_LOD: number;
  TEXTURE_MAX_LOD: number;
  TEXTURE_BASE_LEVEL: number;
  TEXTURE_MAX_LEVEL: number;
  MIN: number;
  MAX: number;
  DEPTH_COMPONENT24: number;
  MAX_TEXTURE_LOD_BIAS: number;
  TEXTURE_COMPARE_MODE: number;
  TEXTURE_COMPARE_FUNC: number;
  CURRENT_QUERY: number;
  QUERY_RESULT: number;
  QUERY_RESULT_AVAILABLE: number;
  STREAM_READ: number;
  STREAM_COPY: number;
  STATIC_READ: number;
  STATIC_COPY: number;
  DYNAMIC_READ: number;
  DYNAMIC_COPY: number;
  MAX_DRAW_BUFFERS: number;
  DRAW_BUFFER0: number;
  DRAW_BUFFER1: number;
  DRAW_BUFFER2: number;
  DRAW_BUFFER3: number;
  DRAW_BUFFER4: number;
  DRAW_BUFFER5: number;
  DRAW_BUFFER6: number;
  DRAW_BUFFER7: number;
  DRAW_BUFFER8: number;
  DRAW_BUFFER9: number;
  DRAW_BUFFER10: number;
  DRAW_BUFFER11: number;
  DRAW_BUFFER12: number;
  DRAW_BUFFER13: number;
  DRAW_BUFFER14: number;
  DRAW_BUFFER15: number;
  MAX_FRAGMENT_UNIFORM_COMPONENTS: number;
  MAX_VERTEX_UNIFORM_COMPONENTS: number;
  SAMPLER_3D: number;
  SAMPLER_2D_SHADOW: number;
  FRAGMENT_SHADER_DERIVATIVE_HINT: number;
  PIXEL_PACK_BUFFER: number;
  PIXEL_UNPACK_BUFFER: number;
  PIXEL_PACK_BUFFER_BINDING: number;
  PIXEL_UNPACK_BUFFER_BINDING: number;
  FLOAT_MAT2x3: number;
  FLOAT_MAT2x4: number;
  FLOAT_MAT3x2: number;
  FLOAT_MAT3x4: number;
  FLOAT_MAT4x2: number;
  FLOAT_MAT4x3: number;
  SRGB: number;
  SRGB8: number;
  SRGB8_ALPHA8: number;
  COMPARE_REF_TO_TEXTURE: number;
  RGBA32F: number;
  RGB32F: number;
  RGBA16F: number;
  RGB16F: number;
  VERTEX_ATTRIB_ARRAY_INTEGER: number;
  MAX_ARRAY_TEXTURE_LAYERS: number;
  MIN_PROGRAM_TEXEL_OFFSET: number;
  MAX_PROGRAM_TEXEL_OFFSET: number;
  MAX_VARYING_COMPONENTS: number;
  TEXTURE_2D_ARRAY: number;
  TEXTURE_BINDING_2D_ARRAY: number;
  R11F_G11F_B10F: number;
  UNSIGNED_INT_10F_11F_11F_REV: number;
  RGB9_E5: number;
  UNSIGNED_INT_5_9_9_9_REV: number;
  TRANSFORM_FEEDBACK_BUFFER_MODE: number;
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: number;
  TRANSFORM_FEEDBACK_VARYINGS: number;
  TRANSFORM_FEEDBACK_BUFFER_START: number;
  TRANSFORM_FEEDBACK_BUFFER_SIZE: number;
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: number;
  RASTERIZER_DISCARD: number;
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: number;
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: number;
  INTERLEAVED_ATTRIBS: number;
  SEPARATE_ATTRIBS: number;
  TRANSFORM_FEEDBACK_BUFFER: number;
  TRANSFORM_FEEDBACK_BUFFER_BINDING: number;
  RGBA32UI: number;
  RGB32UI: number;
  RGBA16UI: number;
  RGB16UI: number;
  RGBA8UI: number;
  RGB8UI: number;
  RGBA32I: number;
  RGB32I: number;
  RGBA16I: number;
  RGB16I: number;
  RGBA8I: number;
  RGB8I: number;
  RED_INTEGER: number;
  RGB_INTEGER: number;
  RGBA_INTEGER: number;
  SAMPLER_2D_ARRAY: number;
  SAMPLER_2D_ARRAY_SHADOW: number;
  SAMPLER_CUBE_SHADOW: number;
  UNSIGNED_INT_VEC2: number;
  UNSIGNED_INT_VEC3: number;
  UNSIGNED_INT_VEC4: number;
  INT_SAMPLER_2D: number;
  INT_SAMPLER_3D: number;
  INT_SAMPLER_CUBE: number;
  INT_SAMPLER_2D_ARRAY: number;
  UNSIGNED_INT_SAMPLER_2D: number;
  UNSIGNED_INT_SAMPLER_3D: number;
  UNSIGNED_INT_SAMPLER_CUBE: number;
  UNSIGNED_INT_SAMPLER_2D_ARRAY: number;
  DEPTH_COMPONENT32F: number;
  DEPTH32F_STENCIL8: number;
  FLOAT_32_UNSIGNED_INT_24_8_REV: number;
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: number;
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: number;
  FRAMEBUFFER_ATTACHMENT_RED_SIZE: number;
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: number;
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: number;
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: number;
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: number;
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: number;
  FRAMEBUFFER_DEFAULT: number;
  DEPTH_STENCIL_ATTACHMENT: number;
  DEPTH_STENCIL: number;
  UNSIGNED_INT_24_8: number;
  DEPTH24_STENCIL8: number;
  UNSIGNED_NORMALIZED: number;
  DRAW_FRAMEBUFFER_BINDING: number;
  READ_FRAMEBUFFER: number;
  DRAW_FRAMEBUFFER: number;
  READ_FRAMEBUFFER_BINDING: number;
  RENDERBUFFER_SAMPLES: number;
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: number;
  MAX_COLOR_ATTACHMENTS: number;
  COLOR_ATTACHMENT1: number;
  COLOR_ATTACHMENT2: number;
  COLOR_ATTACHMENT3: number;
  COLOR_ATTACHMENT4: number;
  COLOR_ATTACHMENT5: number;
  COLOR_ATTACHMENT6: number;
  COLOR_ATTACHMENT7: number;
  COLOR_ATTACHMENT8: number;
  COLOR_ATTACHMENT9: number;
  COLOR_ATTACHMENT10: number;
  COLOR_ATTACHMENT11: number;
  COLOR_ATTACHMENT12: number;
  COLOR_ATTACHMENT13: number;
  COLOR_ATTACHMENT14: number;
  COLOR_ATTACHMENT15: number;
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: number;
  MAX_SAMPLES: number;
  HALF_FLOAT: number;
  RG: number;
  RG_INTEGER: number;
  R8: number;
  RG8: number;
  R16F: number;
  R32F: number;
  RG16F: number;
  RG32F: number;
  R8I: number;
  R8UI: number;
  R16I: number;
  R16UI: number;
  R32I: number;
  R32UI: number;
  RG8I: number;
  RG8UI: number;
  RG16I: number;
  RG16UI: number;
  RG32I: number;
  RG32UI: number;
  VERTEX_ARRAY_BINDING: number;
  R8_SNORM: number;
  RG8_SNORM: number;
  RGB8_SNORM: number;
  RGBA8_SNORM: number;
  SIGNED_NORMALIZED: number;
  COPY_READ_BUFFER: number;
  COPY_WRITE_BUFFER: number;
  COPY_READ_BUFFER_BINDING: number;
  COPY_WRITE_BUFFER_BINDING: number;
  UNIFORM_BUFFER: number;
  UNIFORM_BUFFER_BINDING: number;
  UNIFORM_BUFFER_START: number;
  UNIFORM_BUFFER_SIZE: number;
  MAX_VERTEX_UNIFORM_BLOCKS: number;
  MAX_FRAGMENT_UNIFORM_BLOCKS: number;
  MAX_COMBINED_UNIFORM_BLOCKS: number;
  MAX_UNIFORM_BUFFER_BINDINGS: number;
  MAX_UNIFORM_BLOCK_SIZE: number;
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: number;
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: number;
  UNIFORM_BUFFER_OFFSET_ALIGNMENT: number;
  ACTIVE_UNIFORM_BLOCKS: number;
  UNIFORM_TYPE: number;
  UNIFORM_SIZE: number;
  UNIFORM_BLOCK_INDEX: number;
  UNIFORM_OFFSET: number;
  UNIFORM_ARRAY_STRIDE: number;
  UNIFORM_MATRIX_STRIDE: number;
  UNIFORM_IS_ROW_MAJOR: number;
  UNIFORM_BLOCK_BINDING: number;
  UNIFORM_BLOCK_DATA_SIZE: number;
  UNIFORM_BLOCK_ACTIVE_UNIFORMS: number;
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: number;
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: number;
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: number;
  INVALID_INDEX: number;
  MAX_VERTEX_OUTPUT_COMPONENTS: number;
  MAX_FRAGMENT_INPUT_COMPONENTS: number;
  MAX_SERVER_WAIT_TIMEOUT: number;
  OBJECT_TYPE: number;
  SYNC_CONDITION: number;
  SYNC_STATUS: number;
  SYNC_FLAGS: number;
  SYNC_FENCE: number;
  SYNC_GPU_COMMANDS_COMPLETE: number;
  UNSIGNALED: number;
  SIGNALED: number;
  ALREADY_SIGNALED: number;
  TIMEOUT_EXPIRED: number;
  CONDITION_SATISFIED: number;
  WAIT_FAILED: number;
  SYNC_FLUSH_COMMANDS_BIT: number;
  VERTEX_ATTRIB_ARRAY_DIVISOR: number;
  ANY_SAMPLES_PASSED: number;
  ANY_SAMPLES_PASSED_CONSERVATIVE: number;
  SAMPLER_BINDING: number;
  RGB10_A2UI: number;
  INT_2_10_10_10_REV: number;
  TRANSFORM_FEEDBACK: number;
  TRANSFORM_FEEDBACK_PAUSED: number;
  TRANSFORM_FEEDBACK_ACTIVE: number;
  TRANSFORM_FEEDBACK_BINDING: number;
  COMPRESSED_R11_EAC: number;
  COMPRESSED_SIGNED_R11_EAC: number;
  COMPRESSED_RG11_EAC: number;
  COMPRESSED_SIGNED_RG11_EAC: number;
  COMPRESSED_RGB8_ETC2: number;
  COMPRESSED_SRGB8_ETC2: number;
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: number;
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: number;
  COMPRESSED_RGBA8_ETC2_EAC: number;
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: number;
  TEXTURE_IMMUTABLE_FORMAT: number;
  MAX_ELEMENT_INDEX: number;
  TEXTURE_IMMUTABLE_LEVELS: number;
  TIMEOUT_IGNORED: number;
  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: number;
  // bufferData(target: number, size: number, usage: number): void;
  // bufferData(target: number, srcData: ArrayBuffer, usage: number): void;
  bufferSubData(target: number, dstByteOffset: number, srcData: ArrayBuffer): void;
  // bufferData(target: number, srcData: ArrayBufferView, usage: number, srcOffset: number): void;
  bufferSubData(target: number, dstByteOffset: number, srcData: ArrayBufferView, srcOffset: number): void;
  copyBufferSubData(readTarget: number, writeTarget: number, readOffset: number, writeOffset: number, size: number): void;
  getBufferSubData(target: number, srcByteOffset: number, dstData: ArrayBufferView | ArrayBuffer): void;
  blitFramebuffer(srcX0: number, srcY0: number, srcX1: number, srcY1: number, dstX0: number, dstY0: number, dstX1: number, dstY1: number, mask: number, filter: number): void;
  framebufferTextureLayer(target: number, attachment: number, texture: WebGLTexture, level: number, layer: number): void;
  invalidateFramebuffer(target: number, attachments: number[]): void;
  invalidateSubFramebuffer(target: number, attachments: number[], x: number, y: number, width: number, height: number): void;
  readBuffer(src: number): void;
  getInternalformatParameter(target: number, internalformat: number, pname: number): any;
  renderbufferStorageMultisample(target: number, samples: number, internalformat: number, width: number, height: number): void;
  texStorage2D(target: number, levels: number, internalformat: number, width: number, height: number): void;
  texStorage3D(target: number, levels: number, internalformat: number, width: number, height: number, depth: number): void;
  texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void;
  texImage2D(target: number, level: number, internalformat: number, format: number, type: number, source: (HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageData)): void;
  texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;
  texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, source: (HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageData)): void;
  texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pboOffset: number): void;
  texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, source: (HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageData)): void;
  texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, srcData: ArrayBufferView, srcOffset: number): void;
  texImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, format: number, type: number, pboOffset: number): void;
  texImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, format: number, type: number, source: (HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageData)): void;
  texImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, format: number, type: number, srcData: ArrayBufferView): void;
  texImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, format: number, type: number, srcData: ArrayBufferView, srcOffset: number): void;
  texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pboOffset: number): void;
  texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, source: (HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageData)): void;
  texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, srcData: ArrayBufferView, srcOffset: number): void;
  texSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, width: number, height: number, depth: number, format: number, type: number, pboOffset: number): void;
  texSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, width: number, height: number, depth: number, format: number, type: number, source: (HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageData)): void;
  texSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, width: number, height: number, depth: number, format: number, type: number, srcData: ArrayBufferView): void;
  copyTexSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, x: number, y: number, width: number, height: number): void;
  compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, offset: number): void;
  compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, srcData: ArrayBufferView): void;
  compressedTexImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, offset: number): void;
  compressedTexImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, srcData: ArrayBufferView): void;
  compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, offset: number): void;
  compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, srcData: ArrayBufferView): void;
  compressedTexSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, width: number, height: number, depth: number, format: number, offset: number): void;
  compressedTexSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, width: number, height: number, depth: number, format: number, srcData: ArrayBufferView): void;
  getFragDataLocation(program: WebGLProgram, name: string): number;
  uniform1ui(location: WebGLUniformLocation, v0: number): void;
  uniform2ui(location: WebGLUniformLocation, v0: number, v1: number): void;
  uniform3ui(location: WebGLUniformLocation, v0: number, v1: number, v2: number): void;
  uniform4ui(location: WebGLUniformLocation, v0: number, v1: number, v2: number, v3: number): void;
  uniform1fv(location: WebGLUniformLocation, data: (Float32Array | number[])): void;
  uniform2fv(location: WebGLUniformLocation, data: (Float32Array | number[])): void;
  uniform3fv(location: WebGLUniformLocation, data: (Float32Array | number[])): void;
  uniform4fv(location: WebGLUniformLocation, data: (Float32Array | number[])): void;
  uniform1iv(location: WebGLUniformLocation, data: (Int32Array | number[])): void;
  uniform2iv(location: WebGLUniformLocation, data: (Int32Array | number[])): void;
  uniform3iv(location: WebGLUniformLocation, data: (Int32Array | number[])): void;
  uniform4iv(location: WebGLUniformLocation, data: (Int32Array | number[])): void;
  uniform1uiv(location: WebGLUniformLocation, data: (Uint32Array | number[])): void;
  uniform2uiv(location: WebGLUniformLocation, data: (Uint32Array | number[])): void;
  uniform3uiv(location: WebGLUniformLocation, data: (Uint32Array | number[])): void;
  uniform4uiv(location: WebGLUniformLocation, data: (Uint32Array | number[])): void;
  uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix3x2fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix4x2fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix2x3fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix4x3fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix2x4fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix3x4fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, data: (Float32Array | number[])): void;
  vertexAttribI4i(index: number, x: number, y: number, z: number, w: number): void;
  vertexAttribI4iv(index: number, values: (Int32Array | number[])): void;
  vertexAttribI4ui(index: number, x: number, y: number, z: number, w: number): void;
  vertexAttribI4uiv(index: number, values: (Uint32Array | number[])): void;
  vertexAttribIPointer(index: number, size: number, type: number, stride: number, offset: number): void;
  vertexAttribDivisor(index: number, divisor: number): void;
  drawArraysInstanced(mode: number, first: number, count: number, instanceCount: number): void;
  drawElementsInstanced(mode: number, count: number, type: number, offset: number, instanceCount: number): void;
  drawRangeElements(mode: number, start: number, end: number, count: number, type: number, offset: number): void;
  readPixels(x: number, y: number, width: number, height: number, format: number, type: number, dstData: ArrayBufferView): void;
  readPixels(x: number, y: number, width: number, height: number, format: number, type: number, offset: number): void;
  readPixels(x: number, y: number, width: number, height: number, format: number, type: number, dstData: ArrayBufferView, dstOffset: number): void;
  drawBuffers(buffers: number[]): void;
  clearBufferfv(buffer: number, drawbuffer: number, values: (Float32Array | number[])): void;
  clearBufferiv(buffer: number, drawbuffer: number, values: (Int32Array | number[])): void;
  clearBufferuiv(buffer: number, drawbuffer: number, values: (Uint32Array | number[])): void;
  clearBufferfi(buffer: number, drawbuffer: number, depth: number, stencil: number): void;
  createQuery(): WebGLQuery;
  deleteQuery(query: WebGLQuery): void;
  isQuery(query: WebGLQuery): boolean;
  beginQuery(target: number, query: WebGLQuery): void;
  endQuery(target: number): void;
  getQuery(target: number, pname: number): WebGLQuery;
  getQueryParameter(query: WebGLQuery, pname: number): any;
  createSampler(): WebGLSampler;
  deleteSampler(sampler: WebGLSampler): void;
  isSampler(sampler: WebGLSampler): boolean;
  bindSampler(unit: number, sampler: WebGLSampler): void;
  samplerParameteri(sampler: WebGLSampler, pname: number, param: number): void;
  samplerParameterf(sampler: WebGLSampler, pname: number, param: number): void;
  getSamplerParameter(sampler: WebGLSampler, pname: number): any;
  fenceSync(condition: number, flags: number): WebGLSync;
  isSync(sync: WebGLSync): boolean;
  deleteSync(sync: WebGLSync): void;
  clientWaitSync(sync: WebGLSync, flags: number, timeout: number): number;
  waitSync(sync: WebGLSync, flags: number, timeout: number): void;
  getSyncParameter(sync: WebGLSync, pname: number): any;
  createTransformFeedback(): WebGLTransformFeedback;
  deleteTransformFeedback(feedback: WebGLTransformFeedback): void;
  isTransformFeedback(feedback: WebGLTransformFeedback): boolean;
  bindTransformFeedback(target: number, id: WebGLTransformFeedback): void;
  beginTransformFeedback(primitiveMode: number): void;
  endTransformFeedback(): void;
  transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: number): void;
  getTransformFeedbackVarying(program: WebGLProgram, index: number): WebGLActiveInfo;
  pauseTransformFeedback(): void;
  resumeTransformFeedback(): void;
  bindBufferBase(target: number, index: number, buffer: WebGLBuffer): void;
  bindBufferRange(target: number, index: number, buffer: WebGLBuffer, offset: number, size: number): void;
  getIndexedParameter(target: number, index: number): any;
  getUniformIndices(program: WebGLProgram, uniformNames: string[]): number[];
  getActiveUniforms(program: WebGLProgram, uniformIndices: number[], pname: number): any;
  getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): number;
  getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: number, pname: number): any;
  getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: number): string;
  uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: number, uniformBlockBinding: number): void;
  createVertexArray(): WebGLVertexArrayObject;
  deleteVertexArray(vertexArray: WebGLVertexArrayObject): void;
  isVertexArray(vertexArray: WebGLVertexArrayObject): boolean;
  bindVertexArray(array: WebGLVertexArrayObject): void;
}



/*interface WebGLContextAttributes {
	alpha : bool;
	depth : bool;
	stencil : bool;
	antialias : bool;
	premultipliedAlpha : bool;
}

interface WebGLObject {
}

interface WebGLBuffer extends WebGLObject {
}

interface WebGLFramebuffer extends WebGLObject {
}

interface WebGLProgram extends WebGLObject {
}

interface WebGLRenderbuffer extends WebGLObject {
}

interface WebGLShader extends WebGLObject {
}

interface WebGLTexture extends WebGLObject {
}

interface WebGLUniformLocation {
}

interface WebGLActiveInfo {
	size : number;
	type : number;
	name : string;
}

interface WebGLQuery extends WebGLObject {
}

interface WebGLSampler extends WebGLObject {
}

interface WebGLSync extends WebGLObject {
}

interface WebGLTransformFeedback extends WebGLObject {
}

interface WebGLVertexArrayObject extends WebGLObject {
}

interface WebGLRenderingContext2 {
	DEPTH_BUFFER_BIT : number;
	STENCIL_BUFFER_BIT : number;
	COLOR_BUFFER_BIT : number;
	POINTS : number;
	LINES : number;
	LINE_LOOP : number;
	LINE_STRIP : number;
	TRIANGLES : number;
	TRIANGLE_STRIP : number;
	TRIANGLE_FAN : number;
	ZERO : number;
	ONE : number;
	SRC_COLOR : number;
	ONE_MINUS_SRC_COLOR : number;
	SRC_ALPHA : number;
	ONE_MINUS_SRC_ALPHA : number;
	DST_ALPHA : number;
	ONE_MINUS_DST_ALPHA : number;
	DST_COLOR : number;
	ONE_MINUS_DST_COLOR : number;
	SRC_ALPHA_SATURATE : number;
	FUNC_ADD : number;
	BLEND_EQUATION : number;
	BLEND_EQUATION_RGB : number;
	BLEND_EQUATION_ALPHA : number;
	FUNC_SUBTRACT : number;
	FUNC_REVERSE_SUBTRACT : number;
	BLEND_DST_RGB : number;
	BLEND_SRC_RGB : number;
	BLEND_DST_ALPHA : number;
	BLEND_SRC_ALPHA : number;
	CONSTANT_COLOR : number;
	ONE_MINUS_CONSTANT_COLOR : number;
	CONSTANT_ALPHA : number;
	ONE_MINUS_CONSTANT_ALPHA : number;
	BLEND_COLOR : number;
	ARRAY_BUFFER : number;
	ELEMENT_ARRAY_BUFFER : number;
	ARRAY_BUFFER_BINDING : number;
	ELEMENT_ARRAY_BUFFER_BINDING : number;
	STREAM_DRAW : number;
	STATIC_DRAW : number;
	DYNAMIC_DRAW : number;
	BUFFER_SIZE : number;
	BUFFER_USAGE : number;
	CURRENT_VERTEX_ATTRIB : number;
	FRONT : number;
	BACK : number;
	FRONT_AND_BACK : number;
	TEXTURE_2D : number;
	CULL_FACE : number;
	BLEND : number;
	DITHER : number;
	STENCIL_TEST : number;
	DEPTH_TEST : number;
	SCISSOR_TEST : number;
	POLYGON_OFFSET_FILL : number;
	SAMPLE_ALPHA_TO_COVERAGE : number;
	SAMPLE_COVERAGE : number;
	NO_ERROR : number;
	INVALID_ENUM : number;
	INVALID_VALUE : number;
	INVALID_OPERATION : number;
	OUT_OF_MEMORY : number;
	CW : number;
	CCW : number;
	LINE_WIDTH : number;
	ALIASED_POINT_SIZE_RANGE : number;
	ALIASED_LINE_WIDTH_RANGE : number;
	CULL_FACE_MODE : number;
	FRONT_FACE : number;
	DEPTH_RANGE : number;
	DEPTH_WRITEMASK : number;
	DEPTH_CLEAR_VALUE : number;
	DEPTH_FUNC : number;
	STENCIL_CLEAR_VALUE : number;
	STENCIL_FUNC : number;
	STENCIL_FAIL : number;
	STENCIL_PASS_DEPTH_FAIL : number;
	STENCIL_PASS_DEPTH_PASS : number;
	STENCIL_REF : number;
	STENCIL_VALUE_MASK : number;
	STENCIL_WRITEMASK : number;
	STENCIL_BACK_FUNC : number;
	STENCIL_BACK_FAIL : number;
	STENCIL_BACK_PASS_DEPTH_FAIL : number;
	STENCIL_BACK_PASS_DEPTH_PASS : number;
	STENCIL_BACK_REF : number;
	STENCIL_BACK_VALUE_MASK : number;
	STENCIL_BACK_WRITEMASK : number;
	VIEWPORT : number;
	SCISSOR_BOX : number;
	COLOR_CLEAR_VALUE : number;
	COLOR_WRITEMASK : number;
	UNPACK_ALIGNMENT : number;
	PACK_ALIGNMENT : number;
	MAX_TEXTURE_SIZE : number;
	MAX_VIEWPORT_DIMS : number;
	SUBPIXEL_BITS : number;
	RED_BITS : number;
	GREEN_BITS : number;
	BLUE_BITS : number;
	ALPHA_BITS : number;
	DEPTH_BITS : number;
	STENCIL_BITS : number;
	POLYGON_OFFSET_UNITS : number;
	POLYGON_OFFSET_FACTOR : number;
	TEXTURE_BINDING_2D : number;
	SAMPLE_BUFFERS : number;
	SAMPLES : number;
	SAMPLE_COVERAGE_VALUE : number;
	SAMPLE_COVERAGE_INVERT : number;
	NUM_COMPRESSED_TEXTURE_FORMATS : number;
	COMPRESSED_TEXTURE_FORMATS : number;
	DONT_CARE : number;
	FASTEST : number;
	NICEST : number;
	GENERATE_MIPMAP_HINT : number;
	BYTE : number;
	UNSIGNED_BYTE : number;
	SHORT : number;
	UNSIGNED_SHORT : number;
	INT : number;
	UNSIGNED_INT : number;
	FLOAT : number;
	DEPTH_COMPONENT : number;
	ALPHA : number;
	RGB : number;
	RGBA : number;
	LUMINANCE : number;
	LUMINANCE_ALPHA : number;
	UNSIGNED_SHORT_4_4_4_4 : number;
	UNSIGNED_SHORT_5_5_5_1 : number;
	UNSIGNED_SHORT_5_6_5 : number;
	FRAGMENT_SHADER : number;
	VERTEX_SHADER : number;
	MAX_VERTEX_ATTRIBS : number;
	MAX_VERTEX_UNIFORM_VECTORS : number;
	MAX_VARYING_VECTORS : number;
	MAX_COMBINED_TEXTURE_IMAGE_UNITS : number;
	MAX_VERTEX_TEXTURE_IMAGE_UNITS : number;
	MAX_TEXTURE_IMAGE_UNITS : number;
	MAX_FRAGMENT_UNIFORM_VECTORS : number;
	SHADER_TYPE : number;
	DELETE_STATUS : number;
	LINK_STATUS : number;
	VALIDATE_STATUS : number;
	ATTACHED_SHADERS : number;
	ACTIVE_UNIFORMS : number;
	ACTIVE_UNIFORM_MAX_LENGTH : number;
	ACTIVE_ATTRIBUTES : number;
	ACTIVE_ATTRIBUTE_MAX_LENGTH : number;
	SHADING_LANGUAGE_VERSION : number;
	CURRENT_PROGRAM : number;
	NEVER : number;
	LESS : number;
	EQUAL : number;
	LEQUAL : number;
	GREATER : number;
	NOTEQUAL : number;
	GEQUAL : number;
	ALWAYS : number;
	KEEP : number;
	REPLACE : number;
	INCR : number;
	DECR : number;
	INVERT : number;
	INCR_WRAP : number;
	DECR_WRAP : number;
	VENDOR : number;
	RENDERER : number;
	VERSION : number;
	NEAREST : number;
	LINEAR : number;
	NEAREST_MIPMAP_NEAREST : number;
	LINEAR_MIPMAP_NEAREST : number;
	NEAREST_MIPMAP_LINEAR : number;
	LINEAR_MIPMAP_LINEAR : number;
	TEXTURE_MAG_FILTER : number;
	TEXTURE_MIN_FILTER : number;
	TEXTURE_WRAP_S : number;
	TEXTURE_WRAP_T : number;
	TEXTURE : number;
	TEXTURE_CUBE_MAP : number;
	TEXTURE_BINDING_CUBE_MAP : number;
	TEXTURE_CUBE_MAP_POSITIVE_X : number;
	TEXTURE_CUBE_MAP_NEGATIVE_X : number;
	TEXTURE_CUBE_MAP_POSITIVE_Y : number;
	TEXTURE_CUBE_MAP_NEGATIVE_Y : number;
	TEXTURE_CUBE_MAP_POSITIVE_Z : number;
	TEXTURE_CUBE_MAP_NEGATIVE_Z : number;
	MAX_CUBE_MAP_TEXTURE_SIZE : number;
	TEXTURE0 : number;
	TEXTURE1 : number;
	TEXTURE2 : number;
	TEXTURE3 : number;
	TEXTURE4 : number;
	TEXTURE5 : number;
	TEXTURE6 : number;
	TEXTURE7 : number;
	TEXTURE8 : number;
	TEXTURE9 : number;
	TEXTURE10 : number;
	TEXTURE11 : number;
	TEXTURE12 : number;
	TEXTURE13 : number;
	TEXTURE14 : number;
	TEXTURE15 : number;
	TEXTURE16 : number;
	TEXTURE17 : number;
	TEXTURE18 : number;
	TEXTURE19 : number;
	TEXTURE20 : number;
	TEXTURE21 : number;
	TEXTURE22 : number;
	TEXTURE23 : number;
	TEXTURE24 : number;
	TEXTURE25 : number;
	TEXTURE26 : number;
	TEXTURE27 : number;
	TEXTURE28 : number;
	TEXTURE29 : number;
	TEXTURE30 : number;
	TEXTURE31 : number;
	ACTIVE_TEXTURE : number;
	REPEAT : number;
	CLAMP_TO_EDGE : number;
	MIRRORED_REPEAT : number;
	FLOAT_VEC2 : number;
	FLOAT_VEC3 : number;
	FLOAT_VEC4 : number;
	INT_VEC2 : number;
	INT_VEC3 : number;
	INT_VEC4 : number;
	BOOL : number;
	BOOL_VEC2 : number;
	BOOL_VEC3 : number;
	BOOL_VEC4 : number;
	FLOAT_MAT2 : number;
	FLOAT_MAT3 : number;
	FLOAT_MAT4 : number;
	SAMPLER_2D : number;
	SAMPLER_CUBE : number;
	VERTEX_ATTRIB_ARRAY_ENABLED : number;
	VERTEX_ATTRIB_ARRAY_SIZE : number;
	VERTEX_ATTRIB_ARRAY_STRIDE : number;
	VERTEX_ATTRIB_ARRAY_TYPE : number;
	VERTEX_ATTRIB_ARRAY_NORMALIZED : number;
	VERTEX_ATTRIB_ARRAY_POINTER : number;
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : number;
	COMPILE_STATUS : number;
	INFO_LOG_LENGTH : number;
	SHADER_SOURCE_LENGTH : number;
	LOW_FLOAT : number;
	MEDIUM_FLOAT : number;
	HIGH_FLOAT : number;
	LOW_INT : number;
	MEDIUM_INT : number;
	HIGH_INT : number;
	FRAMEBUFFER : number;
	RENDERBUFFER : number;
	RGBA4 : number;
	RGB5_A1 : number;
	RGB565 : number;
	DEPTH_COMPONENT16 : number;
	STENCIL_INDEX : number;
	STENCIL_INDEX8 : number;
	DEPTH_STENCIL : number;
	RENDERBUFFER_WIDTH : number;
	RENDERBUFFER_HEIGHT : number;
	RENDERBUFFER_INTERNAL_FORMAT : number;
	RENDERBUFFER_RED_SIZE : number;
	RENDERBUFFER_GREEN_SIZE : number;
	RENDERBUFFER_BLUE_SIZE : number;
	RENDERBUFFER_ALPHA_SIZE : number;
	RENDERBUFFER_DEPTH_SIZE : number;
	RENDERBUFFER_STENCIL_SIZE : number;
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : number;
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : number;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : number;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : number;
	COLOR_ATTACHMENT0 : number;
	DEPTH_ATTACHMENT : number;
	STENCIL_ATTACHMENT : number;
	DEPTH_STENCIL_ATTACHMENT : number;
	NONE : number;
	FRAMEBUFFER_COMPLETE : number;
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT : number;
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : number;
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS : number;
	FRAMEBUFFER_UNSUPPORTED : number;
	FRAMEBUFFER_BINDING : number;
	RENDERBUFFER_BINDING : number;
	MAX_RENDERBUFFER_SIZE : number;
	INVALID_FRAMEBUFFER_OPERATION : number;
	UNPACK_FLIP_Y_WEBGL : number;
	UNPACK_PREMULTIPLY_ALPHA_WEBGL : number;
	CONTEXT_LOST_WEBGL : number;
	UNPACK_COLORSPACE_CONVERSION_WEBGL : number;
	BROWSER_DEFAULT_WEBGL : number;
	READ_BUFFER : number;
	UNPACK_ROW_LENGTH : number;
	UNPACK_SKIP_ROWS : number;
	UNPACK_SKIP_PIXELS : number;
	PACK_ROW_LENGTH : number;
	PACK_SKIP_ROWS : number;
	PACK_SKIP_PIXELS : number;
	COLOR : number;
	DEPTH : number;
	STENCIL : number;
	RED : number;
	RGB8 : number;
	RGBA8 : number;
	RGB10_A2 : number;
	TEXTURE_BINDING_3D : number;
	UNPACK_SKIP_IMAGES : number;
	UNPACK_IMAGE_HEIGHT : number;
	TEXTURE_3D : number;
	TEXTURE_WRAP_R : number;
	MAX_3D_TEXTURE_SIZE : number;
	UNSIGNED_INT_2_10_10_10_REV : number;
	MAX_ELEMENTS_VERTICES : number;
	MAX_ELEMENTS_INDICES : number;
	TEXTURE_MIN_LOD : number;
	TEXTURE_MAX_LOD : number;
	TEXTURE_BASE_LEVEL : number;
	TEXTURE_MAX_LEVEL : number;
	MIN : number;
	MAX : number;
	DEPTH_COMPONENT24 : number;
	MAX_TEXTURE_LOD_BIAS : number;
	TEXTURE_COMPARE_MODE : number;
	TEXTURE_COMPARE_FUNC : number;
	CURRENT_QUERY : number;
	QUERY_RESULT : number;
	QUERY_RESULT_AVAILABLE : number;
	STREAM_READ : number;
	STREAM_COPY : number;
	STATIC_READ : number;
	STATIC_COPY : number;
	DYNAMIC_READ : number;
	DYNAMIC_COPY : number;
	MAX_DRAW_BUFFERS : number;
	DRAW_BUFFER0 : number;
	DRAW_BUFFER1 : number;
	DRAW_BUFFER2 : number;
	DRAW_BUFFER3 : number;
	DRAW_BUFFER4 : number;
	DRAW_BUFFER5 : number;
	DRAW_BUFFER6 : number;
	DRAW_BUFFER7 : number;
	DRAW_BUFFER8 : number;
	DRAW_BUFFER9 : number;
	DRAW_BUFFER10 : number;
	DRAW_BUFFER11 : number;
	DRAW_BUFFER12 : number;
	DRAW_BUFFER13 : number;
	DRAW_BUFFER14 : number;
	DRAW_BUFFER15 : number;
	MAX_FRAGMENT_UNIFORM_COMPONENTS : number;
	MAX_VERTEX_UNIFORM_COMPONENTS : number;
	SAMPLER_3D : number;
	SAMPLER_2D_SHADOW : number;
	FRAGMENT_SHADER_DERIVATIVE_HINT : number;
	PIXEL_PACK_BUFFER : number;
	PIXEL_UNPACK_BUFFER : number;
	PIXEL_PACK_BUFFER_BINDING : number;
	PIXEL_UNPACK_BUFFER_BINDING : number;
	FLOAT_MAT2x3 : number;
	FLOAT_MAT2x4 : number;
	FLOAT_MAT3x2 : number;
	FLOAT_MAT3x4 : number;
	FLOAT_MAT4x2 : number;
	FLOAT_MAT4x3 : number;
	SRGB : number;
	SRGB8 : number;
	SRGB8_ALPHA8 : number;
	COMPARE_REF_TO_TEXTURE : number;
	RGBA32F : number;
	RGB32F : number;
	RGBA16F : number;
	RGB16F : number;
	VERTEX_ATTRIB_ARRAY_INTEGER : number;
	MAX_ARRAY_TEXTURE_LAYERS : number;
	MIN_PROGRAM_TEXEL_OFFSET : number;
	MAX_PROGRAM_TEXEL_OFFSET : number;
	MAX_VARYING_COMPONENTS : number;
	TEXTURE_2D_ARRAY : number;
	TEXTURE_BINDING_2D_ARRAY : number;
	R11F_G11F_B10F : number;
	UNSIGNED_INT_10F_11F_11F_REV : number;
	RGB9_E5 : number;
	UNSIGNED_INT_5_9_9_9_REV : number;
	TRANSFORM_FEEDBACK_BUFFER_MODE : number;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : number;
	TRANSFORM_FEEDBACK_VARYINGS : number;
	TRANSFORM_FEEDBACK_BUFFER_START : number;
	TRANSFORM_FEEDBACK_BUFFER_SIZE : number;
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : number;
	RASTERIZER_DISCARD : number;
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS : number;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS : number;
	INTERLEAVED_ATTRIBS : number;
	SEPARATE_ATTRIBS : number;
	TRANSFORM_FEEDBACK_BUFFER : number;
	TRANSFORM_FEEDBACK_BUFFER_BINDING : number;
	RGBA32UI : number;
	RGB32UI : number;
	RGBA16UI : number;
	RGB16UI : number;
	RGBA8UI : number;
	RGB8UI : number;
	RGBA32I : number;
	RGB32I : number;
	RGBA16I : number;
	RGB16I : number;
	RGBA8I : number;
	RGB8I : number;
	RED_INTEGER : number;
	RGB_INTEGER : number;
	RGBA_INTEGER : number;
	SAMPLER_2D_ARRAY : number;
	SAMPLER_2D_ARRAY_SHADOW : number;
	SAMPLER_CUBE_SHADOW : number;
	UNSIGNED_INT_VEC2 : number;
	UNSIGNED_INT_VEC3 : number;
	UNSIGNED_INT_VEC4 : number;
	INT_SAMPLER_2D : number;
	INT_SAMPLER_3D : number;
	INT_SAMPLER_CUBE : number;
	INT_SAMPLER_2D_ARRAY : number;
	UNSIGNED_INT_SAMPLER_2D : number;
	UNSIGNED_INT_SAMPLER_3D : number;
	UNSIGNED_INT_SAMPLER_CUBE : number;
	UNSIGNED_INT_SAMPLER_2D_ARRAY : number;
	DEPTH_COMPONENT32F : number;
	DEPTH32F_STENCIL8 : number;
	FLOAT_32_UNSIGNED_INT_24_8_REV : number;
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : number;
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : number;
	FRAMEBUFFER_ATTACHMENT_RED_SIZE : number;
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : number;
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : number;
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : number;
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : number;
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : number;
	FRAMEBUFFER_DEFAULT : number;
	DEPTH_STENCIL_ATTACHMENT : number;
	DEPTH_STENCIL : number;
	UNSIGNED_INT_24_8 : number;
	DEPTH24_STENCIL8 : number;
	UNSIGNED_NORMALIZED : number;
	DRAW_FRAMEBUFFER_BINDING : number;
	READ_FRAMEBUFFER : number;
	DRAW_FRAMEBUFFER : number;
	READ_FRAMEBUFFER_BINDING : number;
	RENDERBUFFER_SAMPLES : number;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : number;
	MAX_COLOR_ATTACHMENTS : number;
	COLOR_ATTACHMENT1 : number;
	COLOR_ATTACHMENT2 : number;
	COLOR_ATTACHMENT3 : number;
	COLOR_ATTACHMENT4 : number;
	COLOR_ATTACHMENT5 : number;
	COLOR_ATTACHMENT6 : number;
	COLOR_ATTACHMENT7 : number;
	COLOR_ATTACHMENT8 : number;
	COLOR_ATTACHMENT9 : number;
	COLOR_ATTACHMENT10 : number;
	COLOR_ATTACHMENT11 : number;
	COLOR_ATTACHMENT12 : number;
	COLOR_ATTACHMENT13 : number;
	COLOR_ATTACHMENT14 : number;
	COLOR_ATTACHMENT15 : number;
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : number;
	MAX_SAMPLES : number;
	HALF_FLOAT : number;
	RG : number;
	RG_INTEGER : number;
	R8 : number;
	RG8 : number;
	R16F : number;
	R32F : number;
	RG16F : number;
	RG32F : number;
	R8I : number;
	R8UI : number;
	R16I : number;
	R16UI : number;
	R32I : number;
	R32UI : number;
	RG8I : number;
	RG8UI : number;
	RG16I : number;
	RG16UI : number;
	RG32I : number;
	RG32UI : number;
	VERTEX_ARRAY_BINDING : number;
	R8_SNORM : number;
	RG8_SNORM : number;
	RGB8_SNORM : number;
	RGBA8_SNORM : number;
	SIGNED_NORMALIZED : number;
	COPY_READ_BUFFER : number;
	COPY_WRITE_BUFFER : number;
	COPY_READ_BUFFER_BINDING : number;
	COPY_WRITE_BUFFER_BINDING : number;
	UNIFORM_BUFFER : number;
	UNIFORM_BUFFER_BINDING : number;
	UNIFORM_BUFFER_START : number;
	UNIFORM_BUFFER_SIZE : number;
	MAX_VERTEX_UNIFORM_BLOCKS : number;
	MAX_FRAGMENT_UNIFORM_BLOCKS : number;
	MAX_COMBINED_UNIFORM_BLOCKS : number;
	MAX_UNIFORM_BUFFER_BINDINGS : number;
	MAX_UNIFORM_BLOCK_SIZE : number;
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : number;
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS : number;
	UNIFORM_BUFFER_OFFSET_ALIGNMENT : number;
	ACTIVE_UNIFORM_BLOCKS : number;
	UNIFORM_TYPE : number;
	UNIFORM_SIZE : number;
	UNIFORM_BLOCK_INDEX : number;
	UNIFORM_OFFSET : number;
	UNIFORM_ARRAY_STRIDE : number;
	UNIFORM_MATRIX_STRIDE : number;
	UNIFORM_IS_ROW_MAJOR : number;
	UNIFORM_BLOCK_BINDING : number;
	UNIFORM_BLOCK_DATA_SIZE : number;
	UNIFORM_BLOCK_ACTIVE_UNIFORMS : number;
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : number;
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER : number;
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER : number;
	INVALID_INDEX : number;
	MAX_VERTEX_OUTPUT_COMPONENTS : number;
	MAX_FRAGMENT_INPUT_COMPONENTS : number;
	MAX_SERVER_WAIT_TIMEOUT : number;
	OBJECT_TYPE : number;
	SYNC_CONDITION : number;
	SYNC_STATUS : number;
	SYNC_FLAGS : number;
	SYNC_FENCE : number;
	SYNC_GPU_COMMANDS_COMPLETE : number;
	UNSIGNALED : number;
	SIGNALED : number;
	ALREADY_SIGNALED : number;
	TIMEOUT_EXPIRED : number;
	CONDITION_SATISFIED : number;
	WAIT_FAILED : number;
	SYNC_FLUSH_COMMANDS_BIT : number;
	VERTEX_ATTRIB_ARRAY_DIVISOR : number;
	ANY_SAMPLES_PASSED : number;
	ANY_SAMPLES_PASSED_CONSERVATIVE : number;
	SAMPLER_BINDING : number;
	RGB10_A2UI : number;
	INT_2_10_10_10_REV : number;
	TRANSFORM_FEEDBACK : number;
	TRANSFORM_FEEDBACK_PAUSED : number;
	TRANSFORM_FEEDBACK_ACTIVE : number;
	TRANSFORM_FEEDBACK_BINDING : number;
	COMPRESSED_R11_EAC : number;
	COMPRESSED_SIGNED_R11_EAC : number;
	COMPRESSED_RG11_EAC : number;
	COMPRESSED_SIGNED_RG11_EAC : number;
	COMPRESSED_RGB8_ETC2 : number;
	COMPRESSED_SRGB8_ETC2 : number;
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : number;
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 : number;
	COMPRESSED_RGBA8_ETC2_EAC : number;
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : number;
	TEXTURE_IMMUTABLE_FORMAT : number;
	MAX_ELEMENT_INDEX : number;
	TEXTURE_IMMUTABLE_LEVELS : number;
	TIMEOUT_IGNORED : number;
	MAX_CLIENT_WAIT_TIMEOUT_WEBGL : number;
	canvas : HTMLCanvasElement;
	getContextAttributes() : WebGLContextAttributes;
	isContextLost() : bool;
	getSupportedExtensions() : string[];
	getExtension(name : string) : any;
	activeTexture(texture : number) : void;
	attachShader(program : WebGLProgram, shader : WebGLShader) : void;
	bindAttribLocation(program : WebGLProgram, index : number, name : string) : void;
	bindBuffer(target : number, buffer : WebGLBuffer) : void;
	bindFramebuffer(target : number, framebuffer : WebGLFramebuffer) : void;
	bindRenderbuffer(target : number, renderbuffer : WebGLRenderbuffer) : void;
	bindTexture(target : number, texture : WebGLTexture) : void;
	blendColor(red : number, green : number, blue : number, alpha : number) : void;
	blendEquation(mode : number) : void;
	blendEquationSeparate(modeRGB : number, modeAlpha : number) : void;
	blendFunc(sfactor : number, dfactor : number) : void;
	blendFuncSeparate(srcRGB : number, dstRGB : number, srcAlpha : number, dstAlpha : number) : void;
	bufferData(target : number, size : number, usage : number) : void;
	bufferData(target : number, srcData : bufferData, usage : number) : void;
	bufferSubData(target : number, dstByteOffset : number, srcData? : BufferDataSource) : void;
	bufferData(target : number, srcData : ArrayBufferView, usage : number, srcOffset : number, length´? : number) : void;
	bufferSubData(target : number, dstByteOffset : number, srcData : ArrayBufferView, srcOffset : number, length´? : number) : void;
	blitFramebuffer(srcX0 : number, srcY0 : number, srcX1 : number, srcY1 : number, dstX0 : number, dstY0 : number, dstX1 : number, dstY1 : number, mask : number, filter : number) : void;
	framebufferTextureLayer(target : number, attachment : number, texture : WebGLTexture, level : number, layer : number) : void;
	invalidateFramebuffer(target : number, attachments : number[]) : void;
	invalidateSubFramebuffer(target : number, attachments : number[], x : number, y : number, width : number, height : number) : void;
	readBuffer(src : number) : void;
	checkFramebufferStatus(target : number) : number;
	getInternalformatParameter(target : number, internalformat : number, pname : number) : any;
	renderbufferStorageMultisample(target : number, samples : number, internalformat : number, width : number, height : number) : void;
	clear(mask : number) : void;
	clearColor(red : number, green : number, blue : number, alpha : number) : void;
	clearDepth(depth : number) : void;
	clearStencil(s : number) : void;
	colorMask(red : bool, green : bool, blue : bool, alpha : bool) : void;
	compileShader(shader : WebGLShader) : void;
	copyTexImage2D(target : number, level : number, internalformat : number, x : number, y : number, width : number, height : number, border : number) : void;
	copyTexSubImage2D(target : number, level : number, xoffset : number, yoffset : number, x : number, y : number, width : number, height : number) : void;
	createBuffer() : WebGLBuffer;
	createFramebuffer() : WebGLFramebuffer;
	createProgram() : WebGLProgram;
	createRenderbuffer() : WebGLRenderbuffer;
	createShader(type : number) : WebGLShader;
	createTexture() : WebGLTexture;
	cullFace(mode : number) : void;
	deleteBuffer(buffer : WebGLBuffer) : void;
	deleteFramebuffer(framebuffer : WebGLFramebuffer) : void;
	deleteProgram(program : WebGLProgram) : void;
	deleteRenderbuffer(renderbuffer : WebGLRenderbuffer) : void;
	deleteShader(shader : WebGLShader) : void;
	deleteTexture(texture : WebGLTexture) : void;
	depthFunc(func : number) : void;
	depthMask(flag : bool) : void;
	depthRange(zNear : number, zFar : number) : void;
	detachShader(program : WebGLProgram, shader : WebGLShader) : void;
	disable(cap : number) : void;
	disableVertexAttribArray(index : number) : void;
	drawArrays(mode : number, first : number, count : number) : void;
	drawElements(mode : number, count : number, type : number, offset : number) : void;
	enable(cap : number) : void;
	enableVertexAttribArray(index : number) : void;
	finish() : void;
	flush() : void;
	framebufferRenderbuffer(target : number, attachment : number, renderbuffertarget : number, renderbuffer : WebGLRenderbuffer) : void;
	framebufferTexture2D(target : number, attachment : number, textarget : number, texture : WebGLTexture, level : number) : void;
	frontFace(mode : number) : void;
	generateMipmap(target : number) : void;
	getActiveAttrib(program : WebGLProgram, index : number) : WebGLActiveInfo;
	getActiveUniform(program : WebGLProgram, index : number) : WebGLActiveInfo;
	getAttachedShaders(program : WebGLProgram) : WebGLShader[];
	getAttribLocation(program : WebGLProgram, name : string) : number;
	getParameter(pname : number) : any;
	getBufferParameter(target : number, pname : number) : any;
	getError() : number;
	getFramebufferAttachmentParameter(target : number, attachment : number, pname : number) : any;
	getProgramParameter(program : WebGLProgram, pname : number) : any;
	getProgramInfoLog(program : WebGLProgram) : string;
	getRenderbufferParameter(target : number, pname : number) : any;
	getShaderParameter(shader : WebGLShader, pname : number) : any;
	getShaderInfoLog(shader : WebGLShader) : string;
	getShaderSource(shader : WebGLShader) : string;
	getTexParameter(target : number, pname : number) : any;
	getUniform(program : WebGLProgram, location : WebGLUniformLocation) : any;
	getUniformLocation(program : WebGLProgram, name : string) : WebGLUniformLocation;
	getVertexAttrib(index : number, pname : number) : any;
	getVertexAttribOffset(index : number, pname : number) : number;
	hint(target : number, mode : number) : void;
	isBuffer(buffer : WebGLBuffer) : bool;
	isEnabled(cap : number) : bool;
	isFramebuffer(framebuffer : WebGLFramebuffer) : bool;
	isProgram(program : WebGLProgram) : bool;
	isRenderbuffer(renderbuffer : WebGLRenderbuffer) : bool;
	isShader(shader : WebGLShader) : bool;
	isTexture(texture : WebGLTexture) : bool;
	lineWidth(width : number) : void;
	linkProgram(program : WebGLProgram) : void;
	pixelStorei(pname : number, param : number) : void;
	polygonOffset(factor : number, units : number) : void;
	readPixels(x : number, y : number, width : number, height : number, format : number, type : number, dstData? : ArrayBufferView) : void;
	readPixels(x : number, y : number, width : number, height : number, format : number, type : number, offset : number) : void;
	readPixels(x : number, y : number, width : number, height : number, format : number, type : number, dstData : ArrayBufferView, dstOffset : number) : void;
	renderbufferStorage(target : number, internalformat : number, width : number, height : number) : void;
	sampleCoverage(value : number, invert : bool) : void;
	scissor(x : number, y : number, width : number, height : number) : void;
	shaderSource(shader : WebGLShader, source : string) : void;
	stencilFunc(func : number, ref : number, mask : number) : void;
	stencilFuncSeparate(face : number, func : number, ref : number, mask : number) : void;
	stencilMask(mask : number) : void;
	stencilMaskSeparate(face : number, mask : number) : void;
	stencilOp(fail : number, zfail : number, zpass : number) : void;
	stencilOpSeparate(face : number, fail : number, zfail : number, zpass : number) : void;
	texStorage2D(target : number, levels : number, internalformat : number, width : number, height : number) : void;
	texStorage3D(target : number, levels : number, internalformat : number, width : number, height : number, depth : number) : void;
	texImage2D(target : number, level : number, internalformat : number, width : number, height : number, border : number, format : number, type : number, pixels : ArrayBufferView) : void;
	texImage2D(target : number, level : number, internalformat : number, format : number, type : number, source : TexImageSource) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, width : number, height : number, format : number, type : number, pixels : ArrayBufferView) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, format : number, type : number, source : TexImageSource) : void;
	texImage2D(target : number, level : number, internalformat : number, width : number, height : number, border : number, format : number, type : number, pixels : ArrayBufferView) : void;
	texImage2D(target : number, level : number, internalformat : number, format : number, type : number, pixels : ImageData) : void;
	texImage2D(target : number, level : number, internalformat : number, format : number, type : number, image : HTMLImageElement) : void;
	texImage2D(target : number, level : number, internalformat : number, format : number, type : number, canvas : HTMLCanvasElement) : void;
	texImage2D(target : number, level : number, internalformat : number, format : number, type : number, video : HTMLVideoElement) : void;
	texParameterf(target : number, pname : number, param : number) : void;
	texParameteri(target : number, pname : number, param : number) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, width : number, height : number, format : number, type : number, pixels : ArrayBufferView) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, format : number, type : number, pixels : ImageData) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, format : number, type : number, image : HTMLImageElement) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, format : number, type : number, canvas : HTMLCanvasElement) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, format : number, type : number, video : HTMLVideoElement) : void;
	texImage2D(target : number, level : number, internalformat : number, width : number, height : number, border : number, format : number, type : number, pboOffset : number) : void;
	texImage2D(target : number, level : number, internalformat : number, width : number, height : number, border : number, format : number, type : number, source? : TexImageSource) : void;
	texImage2D(target : number, level : number, internalformat : number, width : number, height : number, border : number, format : number, type : number, srcData? : ArrayBufferView, srcOffset : number) : void;
	texImage3D(target : number, level : number, internalformat : number, width : number, height : number, depth : number, border : number, format : number, type : number, pboOffset : number) : void;
	texImage3D(target : number, level : number, internalformat : number, width : number, height : number, depth : number, border : number, format : number, type : number, source : TexImageSource) : void;
	texImage3D(target : number, level : number, internalformat : number, width : number, height : number, depth : number, border : number, format : number, type : number, srcData? : ArrayBufferView) : void;
	texImage3D(target : number, level : number, internalformat : number, width : number, height : number, depth : number, border : number, format : number, type : number, srcData : ArrayBufferView, srcOffset : number) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, width : number, height : number, format : number, type : number, pboOffset : number) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, width : number, height : number, format : number, type : number, source : TexImageSource) : void;
	texSubImage2D(target : number, level : number, xoffset : number, yoffset : number, width : number, height : number, format : number, type : number, srcData : ArrayBufferView, srcOffset : number) : void;
	texSubImage3D(target : number, level : number, xoffset : number, yoffset : number, zoffset : number, width : number, height : number, depth : number, format : number, type : number, pboOffset : number) : void;
	texSubImage3D(target : number, level : number, xoffset : number, yoffset : number, zoffset : number, width : number, height : number, depth : number, format : number, type : number, source : TexImageSource) : void;
	texSubImage3D(target : number, level : number, xoffset : number, yoffset : number, zoffset : number, width : number, height : number, depth : number, format : number, type : number, srcData : ArrayBufferView, srcOffset? : number) : void;
	copyTexSubImage3D(target : number, level : number, xoffset : number, yoffset : number, zoffset : number, x : number, y : number, width : number, height : number) : void;
	compressedTexImage2D(target : number, level : number, internalformat : number, width : number, height : number, border : number, offset : number) : void;
	compressedTexImage2D(target : number, level : number, internalformat : number, width : number, height : number, border : number, srcData : ArrayBufferView, srcOffset? : number) : void;
	compressedTexImage3D(target : number, level : number, internalformat : number, width : number, height : number, depth : number, border : number, offset : number) : void;
	compressedTexImage3D(target : number, level : number, internalformat : number, width : number, height : number, depth : number, border : number, srcData : ArrayBufferView, srcOffset? : number) : void;
	compressedTexSubImage2D(target : number, level : number, xoffset : number, yoffset : number, width : number, height : number, format : number, offset : number) : void;
	compressedTexSubImage2D(target : number, level : number, xoffset : number, yoffset : number, width : number, height : number, format : number, srcData : ArrayBufferView, srcOffset? : number) : void;
	compressedTexSubImage3D(target : number, level : number, xoffset : number, yoffset : number, zoffset : number, width : number, height : number, depth : number, format : number, offset : number) : void;
	compressedTexSubImage3D(target : number, level : number, xoffset : number, yoffset : number, zoffset : number, width : number, height : number, depth : number, format : number, srcData : ArrayBufferView, srcOffset? : number) : void;
	getFragDataLocation(program? : WebGLProgram, name : string) : number;
	uniform1ui(location : WebGLUniformLocation, v0 : number) : void;
	uniform2ui(location : WebGLUniformLocation, v0 : number, v1 : number) : void;
	uniform3ui(location : WebGLUniformLocation, v0 : number, v1 : number, v2 : number) : void;
	uniform4ui(location : WebGLUniformLocation, v0 : number, v1 : number, v2 : number, v3 : number) : void;
	uniform1fv(location : WebGLUniformLocation, data : Float32Array, srcOffset? : number, srcLength? : number) : void;
	uniform2fv(location : WebGLUniformLocation, data : Float32Array, srcOffset? : number, srcLength? : number) : void;
	uniform3fv(location : WebGLUniformLocation, data : Float32Array, srcOffset? : number, srcLength? : number) : void;
	uniform4fv(location : WebGLUniformLocation, data : Float32Array, srcOffset? : number, srcLength? : number) : void;
	uniform1iv(location : WebGLUniformLocation, data : Int32Array, srcOffset? : number, srcLength? : number) : void;
	uniform2iv(location : WebGLUniformLocation, data : Int32Array, srcOffset? : number, srcLength? : number) : void;
	uniform3iv(location : WebGLUniformLocation, data : Int32Array, srcOffset? : number, srcLength? : number) : void;
	uniform4iv(location : WebGLUniformLocation, data : Int32Array, srcOffset? : number, srcLength? : number) : void;
	uniform1uiv(location : WebGLUniformLocation, data : Uint32Array, srcOffset? : number, srcLength? : number) : void;
	uniform2uiv(location : WebGLUniformLocation, data : Uint32Array, srcOffset? : number, srcLength? : number) : void;
	uniform3uiv(location : WebGLUniformLocation, data : Uint32Array, srcOffset? : number, srcLength? : number) : void;
	uniform4uiv(location : WebGLUniformLocation, data : Uint32Array, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix2fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix3x2fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix4x2fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix2x3fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix3fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix4x3fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix2x4fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix3x4fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniformMatrix4fv(location : WebGLUniformLocation, transpose : bool, data : union, srcOffset? : number, srcLength? : number) : void;
	uniform1f(location : WebGLUniformLocation, x : number) : void;
	uniform1fv(location : WebGLUniformLocation, v : Float32Array) : void;
	uniform1fv(location : WebGLUniformLocation, v : number[]) : void;
	uniform1i(location : WebGLUniformLocation, x : number) : void;
	uniform1iv(location : WebGLUniformLocation, v : Int32Array) : void;
	uniform1iv(location : WebGLUniformLocation, v : number[]) : void;
	uniform2f(location : WebGLUniformLocation, x : number, y : number) : void;
	uniform2fv(location : WebGLUniformLocation, v : Float32Array) : void;
	uniform2fv(location : WebGLUniformLocation, v : number[]) : void;
	uniform2i(location : WebGLUniformLocation, x : number, y : number) : void;
	uniform2iv(location : WebGLUniformLocation, v : Int32Array) : void;
	uniform2iv(location : WebGLUniformLocation, v : number[]) : void;
	uniform3f(location : WebGLUniformLocation, x : number, y : number, z : number) : void;
	uniform3fv(location : WebGLUniformLocation, v : Float32Array) : void;
	uniform3fv(location : WebGLUniformLocation, v : number[]) : void;
	uniform3i(location : WebGLUniformLocation, x : number, y : number, z : number) : void;
	uniform3iv(location : WebGLUniformLocation, v : Int32Array) : void;
	uniform3iv(location : WebGLUniformLocation, v : number[]) : void;
	uniform4f(location : WebGLUniformLocation, x : number, y : number, z : number, w : number) : void;
	uniform4fv(location : WebGLUniformLocation, v : Float32Array) : void;
	uniform4fv(location : WebGLUniformLocation, v : number[]) : void;
	uniform4i(location : WebGLUniformLocation, x : number, y : number, z : number, w : number) : void;
	uniform4iv(location : WebGLUniformLocation, v : Int32Array) : void;
	uniform4iv(location : WebGLUniformLocation, v : number[]) : void;
	uniformMatrix2fv(location : WebGLUniformLocation, transpose : bool, value : Float32Array) : void;
	uniformMatrix2fv(location : WebGLUniformLocation, transpose : bool, value : number[]) : void;
	uniformMatrix3fv(location : WebGLUniformLocation, transpose : bool, value : Float32Array) : void;
	uniformMatrix3fv(location : WebGLUniformLocation, transpose : bool, value : number[]) : void;
	uniformMatrix4fv(location : WebGLUniformLocation, transpose : bool, value : Float32Array) : void;
	uniformMatrix4fv(location : WebGLUniformLocation, transpose : bool, value : number[]) : void;
	useProgram(program : WebGLProgram) : void;
	validateProgram(program : WebGLProgram) : void;
	vertexAttribI4i(index : number, x : number, y : number, z : number, w : number) : void;
	vertexAttribI4iv(index : number, values : union) : void;
	vertexAttribI4ui(index : number, x : number, y : number, z : number, w : number) : void;
	vertexAttribI4uiv(index : number, values : union) : void;
	vertexAttribIPointer(index : number, size : number, type : number, stride : number, offset : number) : void;
	vertexAttrib1f(indx : number, x : number) : void;
	vertexAttrib1fv(indx : number, values : Float32Array) : void;
	vertexAttrib1fv(indx : number, values : number[]) : void;
	vertexAttrib2f(indx : number, x : number, y : number) : void;
	vertexAttrib2fv(indx : number, values : Float32Array) : void;
	vertexAttrib2fv(indx : number, values : number[]) : void;
	vertexAttrib3f(indx : number, x : number, y : number, z : number) : void;
	vertexAttrib3fv(indx : number, values : Float32Array) : void;
	vertexAttrib3fv(indx : number, values : number[]) : void;
	vertexAttrib4f(indx : number, x : number, y : number, z : number, w : number) : void;
	vertexAttrib4fv(indx : number, values : Float32Array) : void;
	vertexAttrib4fv(indx : number, values : number[]) : void;
	vertexAttribPointer(indx : number, size : number, type : number, normalized : bool, stride : number, offset : number) : void;
	viewport(x : number, y : number, width : number, height : number) : void;
	drawBuffers(buffers : number[]) : void;
	clearBufferfv(buffer : number, drawbuffer : number, values : union, srcOffset? : number) : void;
	clearBufferiv(buffer : number, drawbuffer : number, values : union, srcOffset? : number) : void;
	clearBufferuiv(buffer : number, drawbuffer : number, values : union, srcOffset? : number) : void;
	clearBufferfi(buffer : number, drawbuffer : number, depth : number, stencil : number) : void;
	vertexAttribDivisor(index : number, divisor : number) : void;
	drawArraysInstanced(mode : number, first : number, count : number, instanceCount : number) : void;
	drawElementsInstanced(mode : number, count : number, type : number, offset : number, instanceCount : number) : void;
	drawRangeElements(mode : number, start : number, end : number, count : number, type : number, offset : number) : void;
	createQuery() : WebGLQuery;
	deleteQuery(query? : WebGLQuery) : void;
	isQuery(query? : WebGLQuery) : bool;
	beginQuery(target : number, query? : WebGLQuery) : void;
	endQuery(target : number) : void;
	getQuery(target : number, pname : number) : WebGLQuery;
	getQueryParameter(query? : WebGLQuery, pname : number) : any;
	createSampler() : WebGLSampler;
	deleteSampler(sampler? : WebGLSampler) : void;
	isSampler(sampler? : WebGLSampler) : bool;
	bindSampler(unit : number, sampler? : WebGLSampler) : void;
	samplerParameteri(sampler? : WebGLSampler, pname : number, param : number) : void;
	samplerParameterf(sampler? : WebGLSampler, pname : number, param : number) : void;
	getSamplerParameter(sampler? : WebGLSampler, pname : number) : any;
	bindBufferBase(target : number, index : number, buffer? : WebGLBuffer) : void;
	bindBufferRange(target : number, index : number, buffer? : WebGLBuffer, offset : number, size : number) : void;
	getIndexedParameter(target : number, index : number) : any;
	getUniformIndices(program? : WebGLProgram, uniformNames : string[]) : number[];
	getActiveUniforms(program? : WebGLProgram, uniformIndices : number[], pname : number) : any;
	getUniformBlockIndex(program? : WebGLProgram, uniformBlockName : string) : number;
	getActiveUniformBlockParameter(program? : WebGLProgram, uniformBlockIndex : number, pname : number) : any;
	getActiveUniformBlockName(program? : WebGLProgram, uniformBlockIndex : number) : string;
	uniformBlockBinding(program? : WebGLProgram, uniformBlockIndex : number, uniformBlockBinding : number) : void;
	createVertexArray() : WebGLVertexArrayObject;
	deleteVertexArray(vertexArray? : WebGLVertexArrayObject) : void;
	isVertexArray(vertexArray? : WebGLVertexArrayObject) : bool;
	bindVertexArray(array? : WebGLVertexArrayObject) : void;
	fenceSync(condition : number, flags : number) : WebGLSync;
	isSync(sync? : WebGLSync) : bool;
	deleteSync(sync? : WebGLSync) : void;
	clientWaitSync(sync? : WebGLSync, flags : number, timeout : number) : number;
	waitSync(sync? : WebGLSync, flags : number, timeout : number) : void;
	getSyncParameter(sync? : WebGLSync, pname : number) : any;
	createTransformFeedback() : WebGLTransformFeedback;
	deleteTransformFeedback(tt? : WebGLTransformFeedback) : void;
	isTransformFeedback(tt? : WebGLTransformFeedback) : bool;
	bindTransformFeedback(target : number, id? : WebGLTransformFeedback) : void;
	beginTransformFeedback(primitiveMode : number) : void;
	endTransformFeedback() : void;
	transformFeedbackVaryings(program? : WebGLProgram, varyings : string[], bufferMode : number) : void;
	getTransformFeedbackVarying(program? : WebGLProgram, index : number) : WebGLActiveInfo;
	pauseTransformFeedback() : void;
	resumeTransformFeedback() : void;
}

interface WebGLContextEvent extends Event {
	statusMessage : string;
	initWebGLContextEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, statusMessageArg : string) : void;
}

*/
